#Map   map(function,iterable)

items = [(3456, "shoe", 790), (2320, "phone", 25300), (2587, "note", 80)]
inr_to_usd = lambda item: (item[0], item[1], item[2] / 74)
inr_to_usd2 = lambda item: (item[0], item[1],"{:.2f}".format(item[2] / 74))
inr_to_usd3 = lambda item: (item[1],"{:.2f}".format(item[2] / 74))
mynewlist = list(map(inr_to_usd, items))
mynewlist2 = list(map(inr_to_usd2, items))
mynewlist3 = list(map(inr_to_usd3, items))
print(mynewlist)
print(mynewlist2)
print(mynewlist3)

#----------------------------------------------------

val = [3,4,5,7,8,4,1]
sqval = lambda x:x*x
fsqlval = list(map(sqval,val))
print(fsqlval)

#----------------------------------------------------
val = [3,4,5,7,8,4,1]
def sqr(num):
    return num*num

print(list(map(sqr,val)))

#----------------------------------------------------

student = [("maths","sk",90),("science","pk",80),("biology","ak",50)]
newlist = lambda x:(x[1],x[2])
mplist = list(map(newlist,student))
print(mplist)

#----------------------------------------------------


val=[3,4,2,1,5,3,4]
newval = lambda x: "even" if x%2==0 else "odd"
mapl = list(map(newval,val))
print(mapl)


============================================================================================================================================

#filter

student = [("maths","sk",90),("science","pk",80),("biology","ak",50)]
iter = lambda x:x[1][0]=='a'
myop =list (filter(iter,student))
print(myop)


===================================================================================================

reduce

reduce(function,iterable)

--------------------------------------

import functools
vals = [4,5,6,3,1,3,4,2]
sum = functools.reduce(lambda x,y:x+y , vals)
print(sum)

chars = ["p","y","t","h","o","n"]
word = functools.reduce(lambda x,y:x+y , chars)
print(word)

**************************************************************************************************************************************************************

List comprehension

sq_list  = [i*i for i in range(1,11)]

print(sql_list)


--------------------------------------------------

temp = [20,40,10,50,70,40]

filered_temp = [x for x in temp if x<30]

print(filered_temp)


#To use else in list comprehension

temp = [20,40,10,50,70,40]

filered_temp = [i if i<30 else 'not less then 30' for i in temp]

print(filered_temp)

----------------------------------------------------------------------------------------------

Dictionary comprehension


cart = {'phone':2500.00,'mobile':1000.00,'battery':100.00,'headphone':300.00}

cart_rounded = {i:round(cart[i]) for i in cart}

or 
#cart_rounded = {k:round(v) for k,v in cart.items()}

print(cart_rounded)


using If


#cart_rounded = {k:round(v) for k,v in cart.items() if v>100}


using else and if

#cart_rounded = {key:round(val)*.9 if val>500 else val for key,val in cart.items()}

--------------------------------------------------------------------------------------
dictionary = {key: function for key,val itterable}

we can pass the fun in dictionary 

def fun_disc(k,v):
   if v=='mobile' or v=='phone':
	v=round(v*.95)
   return v

new_car = {k:fun_disc(k,v) for k,v in cart.items()}

print(new_car)

------------------------------------------------------------------------------------

ZPI     #it will zip two or more iterables as single iterable 

items= ['phone','lamp','table','pen']
price = [10000,200,10000,20]

zipped = list(zip(items,price))   #it will pack as a tuple object 

print(zipped)



