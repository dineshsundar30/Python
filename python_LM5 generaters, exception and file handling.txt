generaters


def sque_num_gen(num):
   for i in range(1,num+1):
       yield i*i                     #here we don't need to use return

print(sque_num_gen(10))      #it's return as a iterable object
 
#to print this you can loop


myoutput = sque_num_gen(10)    # here it will allow as to convert that myoutput as list like print(list(myoutput)) but we should not use that that's the purpose of generater
for i in myoutput:
    print(i)



---------------------------------------------------------------
 modules

                                 #email.py

import email as e
                      #group of similler instruction we can write in one file and it's called one module
print(e.otp())  # here we need to use that file name . to access the function

or 

to import particular function 

from email import otp,message       #here we can use directly that function name but first import file_name is suggestable because
 						it will create a conflicts issue if we have name function name in 2 file
print(otp())


-------------------------------------------------------------------------

EXCEPTION HANDLING

try:
  num =int(input("enter a num"))
  den =int(input("enter a den"))
  result =num/den
  print(result)

except zerodevisionerror: 
   print("you can't devide  by zero")

or 
except zerodevisionerror:  
   print("you can't devide  by zero")


except Exception as e:                    # this is general exception we should use the general exception in last or else all error fall under this exception
   print(e)                                #you can print the error message here
   print("some error occur")


else:
  print(result)                 # you can add else if you don't get any error it will run


finally:                            #it will run all time with or without error (example you use this for file closing)
   print("this will always execute")



------------------------------------------------------------------------------------------------------------------------------------

file handling

with open('myfile.txt') as file:             #file not in the same location you can past the path and replace \ with the \\
    print(file.read())

print(file.closed)   o/p->True because the file is closed in that block
 

write

txt ="it will erase and replace the text"
with open('myfile.txt', 'w') as file:
     f.write(txt)

append
      
txt ="it will not erase and append the text"
with open('myfile.txt', 'a') as file:
     f.write(txt)  
